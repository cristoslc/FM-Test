/**
 * =====================================
 * TestLog
 *
 * PURPOSE:
 *		Accumulates the test log entries already generated by the other Test*
 *		functions into a single list. The log is formatted according to the Test
 *		Anything Protocol (TAP).
 *
 * RETURNS:
 *		A return-delimited list of TAP log entries generated by the previous
 *		Test* function calls in the same local context.
 *
 * PARAMETERS: none
 *
 * DEPENDENCIES: none
 *
 * VARIABLES:
 *		$~test.count
 *		$~test.log[n]
 *		$~test.meta
 *		$~test.passRatioDenominator
 *		$~test.passRatioNumerator
 *		$~test.plan
 *
 * HISTORY:
 *		MODIFIED on 2012-12-13 by Jeremy Bante <http://scr.im/jbante> to
 *		use the passRatio* variables to keep a running tally of the basic
 *		pass percentage.
 *		MODIFIED on 2012-08-17 by Jeremy Bante <http://scr.im/jbante> to handle
 *		results from the TestBailOut function.
 *		CREATED on 2012-06-29 by Jeremy Bante <http://scr.im/jbante>.
 *
 * REFERENCES:
 *		http://testanything.org/
 * =====================================
 */

Let ( [
	~version = "TAP version 13" ;
	$~test.i = If ( IsEmpty ( $~test.i ) ; 0 ; /* Else */ $~test.i + 1 ) ;

	// append pass ratio comment
	~passRatio =
		If ( $~test.i = 0 ; TestComment (
			"pass ratio: "
			& $~test.passRatioNumerator
			& " / "
			& $~test.passRatioDenominator
			& " ("
			& Round (
				100
				* $~test.passRatioNumerator
				/ $~test.passRatioDenominator ;
				0
			)
			& "%)"
		) ) ;

	~testLine = $~test.log[$~test.i]
];
	// only include TAP version, meta information, and test plan in first function call
	If ( $~test.i = 0 ;
		~version
		& If ( not IsEmpty ( $~test.meta ) ;
			"¶	---"
			& Substitute ( ¶ & $~test.meta ; ¶ ; "¶	" )	// indent YAML
			& "¶	..."
		)
		& If ( not IsEmpty ( $~test.plan ) ; ¶ & $~test.plan )
	)

	// Don't include empty opening "Bail out!" line if it doesn't exist
	& If ( $~test.i > 0 or not IsEmpty ( ~testLine ) ; ¶ & ~testLine )

	& If ( $~test.i < $~test.count ;	// there are more tests to log
		TestLog ;
	/* Else */
		Let ( [
			$~test.i = ""	// clear variable for future use
		];
			If ( IsEmpty ( $~test.plan ) ;	// there wasn't an opening plan
				¶ & "1.." & $~test.count
			)
		)
	)
)